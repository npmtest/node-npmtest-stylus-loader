{"/home/travis/build/npmtest/node-npmtest-stylus-loader/test.js":"/* istanbul instrument in package npmtest_stylus_loader */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-stylus-loader/lib.npmtest_stylus_loader.js":"/* istanbul instrument in package npmtest_stylus_loader */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_stylus_loader = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_stylus_loader = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-stylus-loader/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-stylus-loader && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_stylus_loader */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_stylus_loader\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_stylus_loader.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_stylus_loader.rollup.js'] =\n            local.assetsDict['/assets.npmtest_stylus_loader.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_stylus_loader.__dirname + '/lib.npmtest_stylus_loader.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-stylus-loader/node_modules/stylus-loader/index.js":"var loaderUtils = require('loader-utils');\nvar stylus = require('stylus');\nvar path = require('path');\nvar fs = require('fs');\nvar when = require('when');\nvar whenNodefn = require('when/node/function');\nvar cloneDeep = require('lodash.clonedeep');\n\nvar CachedPathEvaluator = require('./lib/evaluator');\nvar PathCache = require('./lib/pathcache');\nvar resolver = require('./lib/resolver');\n\nvar globalImportsCaches = {};\nmodule.exports = function(source) {\n  var self = this;\n  this.cacheable && this.cacheable();\n  var done = this.async();\n  var options = cloneDeep(loaderUtils.getOptions(this) || {});\n  options.dest = options.dest || '';\n  options.filename = options.filename || this.resourcePath;\n  options.Evaluator = CachedPathEvaluator;\n\n  var configKey, stylusOptions;\n  if (this.stylus) {\n    configKey = options.config || 'default';\n    stylusOptions = this.stylus[configKey] || {};\n  } else {\n    configKey = options.config || 'stylus';\n    stylusOptions = this.options[configKey] || {};\n  }\n  // Instead of assigning to options, we run them manually later so their side effects apply earlier for\n  // resolving paths.\n  var use = options.use || stylusOptions.use || [];\n  options.import = options.import || stylusOptions.import || [];\n  options.include = options.include || stylusOptions.include || [];\n  options.set = options.set || stylusOptions.set || {};\n  options.define = options.define || stylusOptions.define || {};\n  options.paths = options.paths || stylusOptions.paths;\n\n  if (options.sourceMap != null) {\n    options.sourcemap = options.sourceMap;\n    delete options.sourceMap;\n  }\n  else if (this.sourceMap) {\n    options.sourcemap = { comment: false };\n  }\n\n  var styl = stylus(source, options);\n  var paths = [path.dirname(options.filename)];\n\n  function needsArray(value) {\n    return (Array.isArray(value)) ? value : [value];\n  }\n\n  if (options.paths && !Array.isArray(options.paths)) {\n    paths = paths.concat(options.paths);\n    options.paths = [options.paths];\n  }\n\n  var manualImports = [];\n  Object.keys(options).forEach(function(key) {\n    var value = options[key];\n    if (key === 'use') {\n      needsArray(value).forEach(function(plugin) {\n        if (typeof plugin === 'function') {\n          styl.use(plugin);\n        } else {\n          throw new Error('Plugin should be a function');\n        }\n      });\n    } else if (key === 'set') {\n      for (var name in value) {\n        styl.set(name, value[name]);\n      }\n    } else if (key === 'define') {\n      for (var defineName in value) {\n        styl.define(defineName, value[defineName]);\n      }\n    } else if (key === 'include') {\n      needsArray(value).forEach(styl.include.bind(styl));\n    } else if (key === 'import') {\n      needsArray(value).forEach(function(stylusModule) {\n        manualImports.push(stylusModule);\n      });\n    } else {\n      styl.set(key, value);\n\n      if (key === 'resolve url' && value) {\n        styl.define('url', resolver());\n      }\n    }\n  });\n\n  var shouldCacheImports = stylusOptions.importsCache !== false;\n\n  var importsCache;\n  if (stylusOptions.importsCache !== false) {\n    if (typeof stylusOptions.importsCache === 'object') {\n      importsCache = stylusOptions.importsCache;\n    } else {\n      if(!globalImportsCaches[configKey]) globalImportsCaches[configKey] = {};\n      importsCache = globalImportsCaches[configKey];\n    }\n  }\n\n  // Use input file system's readFile if available. The normal webpack input\n  // file system is cached with entries purged when they are detected to be\n  // changed on disk by the watcher.\n  var readFile;\n  try {\n    var inputFileSystem = this._compiler.inputFileSystem;\n    readFile = inputFileSystem.readFile.bind(inputFileSystem);\n  } catch (error) {\n    readFile = fs.readFile;\n  }\n\n  var boundResolvers = PathCache.resolvers(options, this.resolve);\n  var pathCacheHelpers = {\n    resolvers: boundResolvers,\n    readFile: readFile,\n  };\n\n  // Use plugins here so that resolve related side effects can be used while we resolve imports.\n  (Array.isArray(use) ? use : [use]).forEach(styl.use, styl);\n\n  when\n    // Resolve manual imports like @import files.\n    .reduce(manualImports, function resolveManualImports(carry, filename) {\n      return PathCache.resolvers\n        .reduce(boundResolvers, path.dirname(options.filename), filename)\n        .then(function(paths) { return carry.concat(paths); });\n    }, [])\n    // Resolve dependencies of\n    .then(function(paths) {\n      paths.forEach(styl.import.bind(styl));\n      paths.forEach(self.addDependency);\n\n      var readFile = whenNodefn.lift(pathCacheHelpers.readFile);\n      return when.reduce(paths, function(cache, filepath) {\n        return readFile(filepath)\n          .then(function(source) {\n            return PathCache.createFromFile(\n              pathCacheHelpers, cache, source.toString(), filepath\n            );\n          });\n      }, {\n        contexts: {},\n        sources: {},\n        imports: importsCache,\n      });\n    })\n    .then(function(cache) {\n      return PathCache\n        .createFromFile(pathCacheHelpers, cache, source, options.filename);\n    })\n    .then(function(importPathCache) {\n      // CachedPathEvaluator will use this PathCache to find its dependencies.\n      options.cache = importPathCache;\n      importPathCache.allDeps().forEach(function(f) {\n        self.addDependency(path.normalize(f));\n      });\n\n      // var paths = importPathCache.origins;\n\n      styl.render(function(err, css) {\n        if (err) {\n          done(err);\n        } else {\n          if (styl.sourcemap) {\n            styl.sourcemap.sourcesContent = styl.sourcemap.sources.map(function (file) {\n              return importPathCache.sources[path.resolve(file)]\n            });\n          }\n          done(null, css, styl.sourcemap);\n        }\n      });\n    })\n    .catch(done);\n};\n\nvar LoaderOptionsPlugin = require('webpack').LoaderOptionsPlugin;\n\n// Webpack 2 plugin for setting options that'll be available to stylus-loader.\nfunction OptionsPlugin(options) {\n  if (!LoaderOptionsPlugin) {\n    throw new Error(\n      'webpack.LoaderOptionPlugin is not available. A newer version of webpack is needed.'\n    );\n  }\n  var stylusOptions = {};\n  var test = options.test || /\\.styl$/;\n  var include = options.include;\n  var exclude = options.exclude;\n\n  var loaderOptions = {\n    stylus: stylusOptions,\n  };\n  for (var key in options) {\n    if (['test', 'include', 'exclude'].indexOf(key) === -1) {\n      stylusOptions[key] = options[key];\n    }\n  }\n  if (test) {\n    loaderOptions.test = test;\n  }\n  if (include) {\n    loaderOptions.include = include;\n  }\n  if (exclude) {\n    loaderOptions.exclude = exclude;\n  }\n  this.plugin = new LoaderOptionsPlugin(loaderOptions);\n};\n\nmodule.exports.OptionsPlugin = OptionsPlugin;\n\nOptionsPlugin.prototype.apply = function(compiler) {\n  this.plugin.apply(compiler);\n};\n","/home/travis/build/npmtest/node-npmtest-stylus-loader/node_modules/stylus-loader/lib/evaluator.js":"// Except for a block in #visitImport, everything here is an exact copy of the\n// source in stylus this currently depends on. If stylus is updated, update\n// this appropriately.\n\nvar Evaluator = require('stylus/lib/visitor/evaluator')\n  , nodes = require('stylus/lib/nodes')\n  , Stack = require('stylus/lib/stack')\n  , Frame = require('stylus/lib/stack/frame')\n  , Scope = require('stylus/lib/stack/scope')\n  , utils = require('stylus/lib/utils')\n  , bifs = require('stylus/lib/functions')\n  , basename = require('path').basename\n  , dirname = require('path').dirname\n  , relative = require('path').relative\n  , join = require('path').join\n  , colors = require('stylus/lib/colors')\n  // , debug = require('debug')('stylus:evaluator')\n  , fs = require('fs');\n\nmodule.exports = CachedPathEvaluator;\n\n/**\n * Import `file` and return Block node.\n *\n * @api private\n */\nfunction importFile(node, file, literal, index) {\n  var importStack = this.importStack\n    , Parser = require('stylus/lib/parser')\n    , stat;\n\n  // Handling the `require`\n  if (node.once) {\n    if (this.requireHistory[file]) return nodes.null;\n    this.requireHistory[file] = true;\n\n    if (literal && !this.includeCSS) {\n      return node;\n    }\n  }\n\n  // Expose imports\n  node.path = file;\n  node.dirname = dirname(file);\n  // Store the modified time\n  stat = fs.statSync(file);\n  node.mtime = stat.mtime;\n  this.paths.push(node.dirname);\n\n  // Avoid overflows from importing the same file over again\n  if (file === importStack[importStack.length - 1]) return nodes.null;\n\n  if (this.options._imports) this.options._imports.push(node.clone());\n\n  // Parse the file\n  importStack.push(file);\n  nodes.filename = file;\n\n  var str;\n  if (this.cache.sources && this.cache.sources[file]) {\n    str = this.cache.sources[file];\n  } else {\n    str = fs.readFileSync(file, 'utf8');\n  }\n\n  if (literal && !this.resolveURL) return new nodes.Literal(str.replace(/\\r\\n?/g, '\\n'));\n\n  // parse\n  var block = new nodes.Block\n    , parser = new Parser(str, utils.merge({ root: block }, this.options));\n\n  try {\n    block = parser.parse();\n  } catch (err) {\n    err.filename = file;\n    err.lineno = parser.lexer.lineno;\n    err.input = str;\n    throw err;\n  }\n\n  // Evaluate imported \"root\"\n  block.parent = this.root;\n  block.scope = false;\n  var ret = this.visit(block);\n  importStack.pop();\n  if (importStack.length || index) this.paths.pop();\n\n  return ret;\n}\n\nfunction CachedPathEvaluator(root, options) {\n  Evaluator.apply(this, arguments);\n\n  this.cache = options.cache;\n}\n\nCachedPathEvaluator.prototype = Object.create(Evaluator.prototype);\nCachedPathEvaluator.prototype.constructor = CachedPathEvaluator;\n\nCachedPathEvaluator.prototype.visitImport = function(imported) {\n  this.return++;\n\n  var path = this.visit(imported.path).first\n    , nodeName = imported.once ? 'require' : 'import'\n    , found\n    , literal\n    , index;\n\n  this.return--;\n  // debug('import %s', path);\n\n  // url() passed\n  if ('url' == path.name) {\n    if (imported.once) throw new Error('You cannot @require a url');\n\n    return imported;\n  }\n\n  // Ensure string\n  if (!path.string) throw new Error('@' + nodeName + ' string expected');\n\n  var name = path = path.string;\n\n  // Absolute URL\n  if (/url\\s*\\(\\s*['\"]?(?:https?:)?\\/\\//i.test(path)) {\n    if (imported.once) throw new Error('You cannot @require a url');\n    return imported;\n  }\n\n  // Literal\n  if (/\\.css(?:\"|$)/.test(path)) {\n    literal = true;\n    if (!imported.once && !this.includeCSS) {\n      return imported;\n    }\n  }\n\n  // support optional .styl\n  if (!literal && !/\\.styl$/i.test(path)) path += '.styl';\n\n  /*****************************************************************************\n  * THIS IS THE ONLY BLOCK THAT DIFFERS FROM THE ACTUAL STYLUS IMPLEMENTATION. *\n  *****************************************************************************/\n  // Lookup\n  var dirname = this.paths[this.paths.length - 1];\n  found = this.cache.find(path, dirname);\n  index = this.cache.isIndex(path, dirname);\n  if (!found) {\n    found = utils.find(path, this.paths, this.filename);\n    if (!found) {\n      found = utils.lookupIndex(name, this.paths, this.filename);\n      index = true;\n    }\n  }\n\n  // Throw if import failed\n  if (!found) throw new Error('failed to locate @' + nodeName + ' file ' + path);\n\n  var block = new nodes.Block;\n\n  for (var i = 0, len = found.length; i < len; ++i) {\n    block.push(importFile.call(this, imported, found[i], literal, index));\n  }\n\n  return block;\n}\n","/home/travis/build/npmtest/node-npmtest-stylus-loader/node_modules/stylus-loader/lib/pathcache.js":"var path = require('path');\nvar fs = require('fs');\n\nvar Evaluator = require('stylus/lib/visitor/evaluator');\nvar loaderUtils = require('loader-utils');\nvar nodes = require('stylus/lib/nodes');\nvar utils = require('stylus/lib/utils');\nvar when = require('when');\nvar whenNodefn = require('when/node/function');\n\nvar listImports = require('./listimports');\n\nmodule.exports = PathCache;\n\nvar readFile = whenNodefn.lift(fs.readFile);\n\n// A cache of import paths of a stylus file resolved to their location on disk\n// before the stylus file is rendered. With a special evaluator this lets us\n// webpack's resolver.\nfunction PathCache(contexts, sources, imports) {\n  this.contexts = contexts;\n  this.sources = sources;\n  this.imports = imports;\n\n  // Non relative paths are simpler and looked up in this as a fallback\n  // to this.context.\n  this.simpleContext = {};\n  for (var dirname in this.contexts) {\n    for (var path in this.contexts[dirname]) {\n      this.simpleContext[path] = this.contexts[dirname][path];\n    }\n  }\n}\n\n// Return a promise for a PathCache.\nPathCache.create = function(contexts, sources, imports) {\n  return when(new PathCache(contexts, sources, imports));\n};\nPathCache.createFromFile = resolveFileDeep;\n\n// Create a list of ways to resolve paths.\nPathCache.resolvers = resolvers;\n\nPathCache.resolvers.reduce = reduceResolvers;\n\n// Lookup the path in this cache.\nPathCache.prototype.find = function(path, dirname) {\n  if (this.contexts[dirname] && this.contexts[dirname][path]) {\n    return this.contexts[dirname][path].path;\n  } else if (this.simpleContext[path]) {\n    return this.simpleContext[path].path;\n  } else if (/.styl$/.test(path)) {\n    // A user can specify @import 'something.styl' but if they specify\n    // @import 'something' stylus adds .styl, we drop that here to see if we\n    // looked for it without .styl.\n    return this.find(path.replace(/.styl$/, ''), dirname);\n  } else {\n    return undefined;\n  }\n};\n\n// Return if the path in this cache is an index file.\nPathCache.prototype.isIndex = function(path, dirname) {\n  if (this.contexts[dirname] && this.contexts[dirname][path]) {\n    return this.contexts[dirname][path].index;\n  } else {\n    return undefined;\n  }\n};\n\n// Return an array of all imports the original file depends on.\nPathCache.prototype.allDeps = function() {\n  var deps = [];\n  for (var dirname in this.contexts) {\n    for (var path in this.contexts[dirname]) {\n      if (this.contexts[dirname][path]) {\n        deps = deps.concat(this.contexts[dirname][path].path);\n      }\n    }\n  }\n  return deps;\n};\n\n// Create an array of ways to resolve a path.\n//\n// The resolved paths may be a path or an object specifying path and index\n// members. The index member is used later by stylus, we store it at this point.\nfunction resolvers(options, webpackResolver) {\n  var evaluator = new Evaluator(nodes.null, options);\n  var whenWebpackResolver = whenNodefn.lift(webpackResolver);\n\n  // Stylus's normal resolver for single files.\n  var stylusFile = function(context, path) {\n    // Stylus adds .styl to paths for normal \"paths\" lookup if it isn't there.\n    if (!/.styl$/.test(path)) {\n      path += '.styl';\n    }\n\n    var paths = options.paths.concat(context);\n    var found = utils.find(path, paths, options.filename)\n    if (found) {\n      return normalizePaths(found);\n    }\n  };\n\n  // Stylus's normal resolver for node_modules packages. Cannot locate paths\n  // inside a package.\n  var stylusIndex = function(context, path) {\n    // Stylus calls the argument name. If it exists it should match the name\n    // of a module in node_modules.\n    if (!path) {\n      return null;\n    }\n\n    var paths = options.paths.concat(context);\n    var found = utils.lookupIndex(path, paths, options.filename);\n    if (found) {\n      return {path: normalizePaths(found), index: true};\n    }\n  };\n\n  // Fallback to resolving with webpack's configured resovler.\n  var webpackResolve = function(context, path) {\n    // Follow the webpack stylesheet idiom of '~path' meaning a path in a\n    // modules folder and a unprefixed 'path' meaning a relative path like\n    // './path'.\n    path = loaderUtils.urlToRequest(path, options.root);\n    // First try with a '.styl' extension.\n    return whenWebpackResolver(context, path + '.styl')\n      // If the user adds \".styl\" to resolve.extensions, webpack can find\n      // index files like stylus but it uses all of webpack's configuration,\n      // by default for example the module could be web_modules.\n      .catch(function() { return whenWebpackResolver(context, path); })\n      .catch(function() { return null; })\n      .then(function(result) {\n        return Array.isArray(result) && result[1] && result[1].path || result\n      });\n  };\n\n  if (options.preferPathResolver === 'webpack') {\n    return [\n      webpackResolve,\n      stylusFile,\n      stylusIndex\n    ];\n  }\n  else {\n    return [\n      stylusFile,\n      stylusIndex,\n      webpackResolve\n    ];\n  }\n}\n\nfunction reduceResolvers(resolvers, context, path) {\n  return when\n    .reduce(resolvers, function(result, resolver) {\n      return result ? result : resolver(context, path);\n    }, undefined);\n}\n\n// Run resolvers on one path and return an object with the found path under a\n// key of the original path.\n//\n// Example:\n// resolving the path\n//   'a/file'\n// returns an object\n//   {'a/file': {path: ['node_modules/a/file'], index: true}}\nfunction resolveOne(resolvers, context, path) {\n  return reduceResolvers(resolvers, context, path)\n    .then(function(result) {\n      result = typeof result === 'string' ? [result] : result;\n      result = Array.isArray(result) ? {path: result, index: false} : result;\n      var map = {};\n      map[path] = result;\n      return map;\n    });\n}\n\n// Run the resolvers on an array of paths and return an object like resolveOne.\nfunction resolveMany(resolvers, context, paths) {\n  return when\n    .map(paths, resolveOne.bind(null, resolvers, context))\n    .then(function(maps) {\n      return maps.reduce(function(map, resolvedPaths) {\n        Object.keys(resolvedPaths).forEach(function(path) {\n          map[path] = resolvedPaths[path];\n        });\n        return map;\n      }, {});\n    });\n}\n\n// Load a file at fullPath, resolve all of it's imports and report for those.\nfunction resolveFileDeep(helpers, parentCache, source, fullPath) {\n  var resolvers = helpers.resolvers;\n  var readFile = helpers.readFile;\n\n  var contexts = parentCache.contexts;\n  var sources = parentCache.sources;\n\n  contexts = contexts || {};\n  var nestResolve = resolveFileDeep.bind(null, helpers, parentCache, null);\n  var context = path.dirname(fullPath);\n  readFile = whenNodefn.lift(readFile);\n\n  return when\n    .resolve(source || sources[fullPath] || readFile(fullPath))\n    // Cast the buffer from the cached input file system to a string.\n    .then(String)\n    // Store the source so that the evaluator doesn't need to touch the\n    // file system.\n    .then(function(_source) {\n      sources[fullPath] = _source;\n      return _source;\n    })\n    // Make sure the stylus functions/index.styl source is stored.\n    .then(partial(ensureFunctionsSource, sources))\n    // List imports and use its cache. The source file is translated into a\n    // list of imports. Where the source file came from isn't important for the\n    // list. The where is added by resolveMany with the context and resolvers.\n    .then(partialRight(listImports, { cache: parentCache.imports }))\n    .then(resolveMany.bind(null, resolvers, context))\n    .then(function(newPaths) {\n      // Contexts are the full path since multiple could be in the same folder\n      // but different deps.\n      contexts[context] = merge(contexts[context] || {}, newPaths);\n      return when.map(Object.keys(newPaths), function(key) {\n        var found = newPaths[key] && newPaths[key].path;\n        if (found) {\n          return when.map(found, nestResolve);\n        }\n      });\n    })\n    .then(function() {\n      return PathCache.create(contexts, sources, parentCache.imports);\n    });\n}\n\n// Resolve functions in a promise wrapper to catch any errors from resolving.\nvar functionsPath =\n  new when.Promise(function(resolve) {\n    resolve(require.resolve('stylus/lib/functions/index.styl'));\n  })\n  .catch(function() { return ''; });\n\nvar functionsSource = functionsPath\n  .then(readFile)\n  .catch(function(error) {\n    // Ignore error if functions/index.styl doesn't exist.\n    if (error.code !== 'ENOENT') {\n      throw error;\n    }\n    return '';\n  })\n  .then(String);\n\nfunction ensureFunctionsSource(sources, source) {\n  if (!sources[functionsPath]) {\n    return functionsSource\n      .then(function(functionsSource) {\n        if (functionsSource) {\n          sources[functionsPath] = functionsSource;\n        }\n      })\n      // Pass through the source given to this function.\n      .yield(source);\n  }\n  // Pass through the source given to this function.\n  return source;\n}\n\nvar slice = Array.prototype.slice.call.bind(Array.prototype.slice);\n\nfunction merge(a, b) {\n  var key;\n  for (key in b) {\n    a[key] = b[key];\n  }\n  return a;\n}\n\nfunction partial(fn) {\n  var args = slice(arguments, 1);\n  return function() {\n    return fn.apply(this, args.concat(slice(arguments)));\n  };\n}\n\nfunction partialRight(fn) {\n  var args = slice(arguments, 1);\n  return function() {\n    return fn.apply(this, slice(arguments).concat(args));\n  };\n}\n\nfunction normalizePaths(paths) {\n  for(var i in paths) {\n    paths[i] = path.normalize(paths[i]);\n  }\n  return paths;\n}","/home/travis/build/npmtest/node-npmtest-stylus-loader/node_modules/stylus-loader/lib/listimports.js":"var Parser = require('stylus/lib/parser');\nvar Visitor = require('stylus/lib/visitor');\nvar nodes = require('stylus/lib/nodes');\n\nmodule.exports = listImports;\n\n// ImportVisitor is a simple stylus ast visitor that navigates the graph\n// building a list of imports in it.\nfunction ImportVisitor() {\n  Visitor.apply(this, arguments);\n  this.importPaths = [];\n}\n\nImportVisitor.prototype = Object.create(Visitor.prototype);\nImportVisitor.prototype.constructor = ImportVisitor;\n\nImportVisitor.prototype.visitImport = function(node) {\n  this.importPaths.push(node.path.first.string);\n  return node;\n};\n\nImportVisitor.prototype.visitRoot = function(block){\n  for (var i = 0; i < block.nodes.length; ++i) {\n    this.visit(block.nodes[i]);\n  }\n  return block;\n};\n\nImportVisitor.prototype.visitExpression = function(expr) {\n  for (var i = 0; i < expr.nodes.length; ++i) {\n    this.visit(expr.nodes[i]);\n  }\n  return expr;\n};\n\nImportVisitor.prototype.visitCall = function(fn) {\n  if (fn.name === 'use' || fn.name === 'json') {\n    this.importPaths.push(fn.args.first.string);\n  }\n  return fn;\n};\n\nImportVisitor.prototype.visitSelector = function(sel) {\n  for (var i = 0; i < sel.block.nodes.length; i++) {\n    this.visit(sel.block.nodes[i]);\n  }\n  return sel;\n}\n\nImportVisitor.prototype.visitBlock = ImportVisitor.prototype.visitRoot;\nImportVisitor.prototype.visitGroup = ImportVisitor.prototype.visitRoot;\n\n// Returns a list of paths that given source imports.\nfunction listImports(source, options) {\n  // Store source -> imports work in a cache. The Parser is the most expensive\n  // part of stylus and we can't use their cache without creating undesired side\n  // effects later during the actual render. In single run builds this will\n  // benefit repeated files imported like common styling. In multiple run builds\n  // this will help stylus import trees when a dependency changes, the higher up\n  // files won't need to be parsed again.\n  var cache = options.cache;\n  if (cache && cache[source]) { return cache[source]; }\n\n  // Current idea here is to silence errors and let them rise in stylus's\n  // renderer which has more handling so that the error message is more\n  // meaningful and easy to understand.\n  try {\n    var ast = new Parser(source, { cache: false }).parse();\n  } catch (e) {\n    return [];\n  }\n  var importVisitor = new ImportVisitor(ast, {});\n  importVisitor.visit(ast);\n\n  if (cache) {\n    cache[source] = importVisitor.importPaths;\n  }\n\n  return importVisitor.importPaths;\n}\n","/home/travis/build/npmtest/node-npmtest-stylus-loader/node_modules/stylus-loader/lib/resolver.js":"// This implementation of the url resolver adds awareness for webpack loaders\n/*\n\nModified from the stylus implementation:\n\n(The MIT License)\n\nCopyright (c) 2010–2014 LearnBoost <dev@learnboost.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n/*jshint laxcomma:true */\nvar Stylus = require('stylus')\n    , Compiler = Stylus.Compiler\n    , nodes = Stylus.nodes\n    , utils = Stylus.utils\n  , parse = require('url').parse\n  , relative = require('path').relative\n  , dirname = require('path').dirname\n  , extname = require('path').extname\n  , sep = require('path').sep;\n\n/**\n * Return a url() function with the given `options`.\n *\n * Options:\n *\n *    - `paths` resolution path(s), merged with general lookup paths\n *\n * Examples:\n *\n *    stylus(str)\n *      .set('filename', __dirname + '/css/test.styl')\n *      .define('url', stylus.resolver({ paths: [__dirname + '/public'] }))\n *      .render(function(err, css){ ... })\n *\n * @param {Object} options\n * @return {Function}\n * @api public\n */\n\nmodule.exports = function(options) {\n  options = options || {};\n\n  var _paths = options.paths || [];\n\n  function url(url) {\n    var paths = _paths.concat(this.paths),\n        filename = this.filename;\n\n    // Compile the url\n    var compiler = new Compiler(url);\n    compiler.isURL = true;\n    url = url.nodes.map(function(node){\n      return compiler.visit(node);\n    }).join('');\n\n    function resolveComponent(url) {\n      if (!url) {\n        return url;\n      }\n\n      url = parse(url);\n      if (url.protocol) {\n        return url.href;\n      }\n\n      // Lookup\n      var found = utils.lookup(url.pathname, paths, '', true);\n      if (!found) {\n        return url.href;\n      }\n\n      var tail = '';\n      if (url.search) {\n        tail += url.search;\n      }\n      if (url.hash) {\n        tail += url.hash;\n      }\n\n      var res = relative(dirname(filename), found) + tail;\n      if ('\\\\' == sep) res = res.replace(/\\\\/g, '/');\n      return res;\n    }\n\n    var components = url.split(/!/g);\n    components = components.map(resolveComponent);\n    return new nodes.Literal('url(\"' + components.join('!') + '\")');\n  }\n\n  url.raw = true;\n  return url;\n};\n"}